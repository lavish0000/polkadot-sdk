
//! Autogenerated weights for `pallet_revive`
//!
//! THIS FILE WAS AUTO-GENERATED USING THE SUBSTRATE BENCHMARK CLI VERSION 32.0.0
//! DATE: 2024-10-17, STEPS: `2`, REPEAT: `1`, LOW RANGE: `[]`, HIGH RANGE: `[]`
//! WORST CASE MAP SIZE: `1000000`
//! HOSTNAME: `luna`, CPU: `AMD Ryzen 9 3900X 12-Core Processor`
//! WASM-EXECUTION: `Compiled`, CHAIN: `Some("dev")`, DB CACHE: 1024

// Executed Command:
// /home/glow/code/polkadot-sdk/target/release/substrate-node
// benchmark
// pallet
// --chain
// dev
// --pallet
// pallet-revive
// --extrinsic
// *
// --steps
// 2
// --repeat
// 1
// --output
// src/weights.rs

#![cfg_attr(rustfmt, rustfmt_skip)]
#![allow(unused_parens)]
#![allow(unused_imports)]
#![allow(missing_docs)]

use frame_support::{traits::Get, weights::Weight};
use core::marker::PhantomData;

/// Weight functions for `pallet_revive`.
pub struct WeightInfo<T>(PhantomData<T>);
impl<T: frame_system::Config> pallet_revive::WeightInfo for WeightInfo<T> {
	/// Storage: `Revive::DeletionQueueCounter` (r:1 w:0)
	/// Proof: `Revive::DeletionQueueCounter` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	fn on_process_deletion_queue_batch() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `1594`
		// Minimum execution time: 4_100_000 picoseconds.
		Weight::from_parts(4_100_000, 0)
			.saturating_add(Weight::from_parts(0, 1594))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `k` is `[0, 1024]`.
	fn on_initialize_per_trie_key(_k: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `258 + k * (69 Â±0)`
		//  Estimated: `71536`
		// Minimum execution time: 19_060_000 picoseconds.
		Weight::from_parts(1_302_089_000, 0)
			.saturating_add(Weight::from_parts(0, 71536))
			.saturating_add(T::DbWeight::get().reads(1026))
			.saturating_add(T::DbWeight::get().writes(1026))
	}
	/// Storage: `Revive::ContractInfoOf` (r:1 w:1)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `c` is `[0, 262144]`.
	fn call_with_code_per_byte(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1466`
		//  Estimated: `4931`
		// Minimum execution time: 106_652_000 picoseconds.
		Weight::from_parts(107_433_000, 0)
			.saturating_add(Weight::from_parts(0, 4931))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:2 w:2)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(337), added: 2812, mode: `Measured`)
	/// Storage: `Revive::ContractInfoOf` (r:1 w:1)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// The range of component `c` is `[0, 262144]`.
	/// The range of component `i` is `[0, 262144]`.
	fn instantiate_with_code(_c: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `251`
		//  Estimated: `6191`
		// Minimum execution time: 273_706_000 picoseconds.
		Weight::from_parts(280_456_000, 0)
			.saturating_add(Weight::from_parts(0, 6191))
			// Standard Error: 116
			.saturating_add(Weight::from_parts(3_424, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(6))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Revive::ContractInfoOf` (r:1 w:1)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(337), added: 2812, mode: `Measured`)
	/// The range of component `i` is `[0, 262144]`.
	fn instantiate(_i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1209`
		//  Estimated: `4674`
		// Minimum execution time: 224_365_000 picoseconds.
		Weight::from_parts(1_122_345_000, 0)
			.saturating_add(Weight::from_parts(0, 4674))
			.saturating_add(T::DbWeight::get().reads(6))
			.saturating_add(T::DbWeight::get().writes(4))
	}
	/// Storage: `Revive::ContractInfoOf` (r:1 w:1)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Timestamp::Now` (r:1 w:0)
	/// Proof: `Timestamp::Now` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	fn call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1466`
		//  Estimated: `4931`
		// Minimum execution time: 106_643_000 picoseconds.
		Weight::from_parts(106_643_000, 0)
			.saturating_add(Weight::from_parts(0, 4931))
			.saturating_add(T::DbWeight::get().reads(5))
			.saturating_add(T::DbWeight::get().writes(2))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(337), added: 2812, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// The range of component `c` is `[0, 262144]`.
	fn upload_code(_c: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `109`
		//  Estimated: `3574`
		// Minimum execution time: 78_962_000 picoseconds.
		Weight::from_parts(79_572_000, 0)
			.saturating_add(Weight::from_parts(0, 3574))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Balances::Holds` (r:1 w:1)
	/// Proof: `Balances::Holds` (`max_values`: None, `max_size`: Some(337), added: 2812, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:0 w:1)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	fn remove_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `285`
		//  Estimated: `3750`
		// Minimum execution time: 60_011_000 picoseconds.
		Weight::from_parts(60_011_000, 0)
			.saturating_add(Weight::from_parts(0, 3750))
			.saturating_add(T::DbWeight::get().reads(2))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// Storage: `Revive::ContractInfoOf` (r:1 w:1)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:2 w:2)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	fn set_code() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `495`
		//  Estimated: `6435`
		// Minimum execution time: 33_121_000 picoseconds.
		Weight::from_parts(33_121_000, 0)
			.saturating_add(Weight::from_parts(0, 6435))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// The range of component `r` is `[0, 1600]`.
	fn noop_host_fn(_r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_490_000 picoseconds.
		Weight::from_parts(306_447_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_caller() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 460_000 picoseconds.
		Weight::from_parts(460_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 430_000 picoseconds.
		Weight::from_parts(430_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Revive::ContractInfoOf` (r:1 w:0)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	fn seal_is_contract() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `272`
		//  Estimated: `3737`
		// Minimum execution time: 8_300_000 picoseconds.
		Weight::from_parts(8_300_000, 0)
			.saturating_add(Weight::from_parts(0, 3737))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Revive::ContractInfoOf` (r:1 w:0)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	fn seal_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `369`
		//  Estimated: `3834`
		// Minimum execution time: 9_480_000 picoseconds.
		Weight::from_parts(9_480_000, 0)
			.saturating_add(Weight::from_parts(0, 3834))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	fn seal_own_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 480_000 picoseconds.
		Weight::from_parts(480_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_caller_is_origin() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 570_000 picoseconds.
		Weight::from_parts(570_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_caller_is_root() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 460_000 picoseconds.
		Weight::from_parts(460_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 400_000 picoseconds.
		Weight::from_parts(400_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_weight_left() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_070_000 picoseconds.
		Weight::from_parts(1_070_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `101`
		//  Estimated: `0`
		// Minimum execution time: 5_960_000 picoseconds.
		Weight::from_parts(5_960_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `System::Account` (r:1 w:0)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	fn seal_balance_of() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `52`
		//  Estimated: `3517`
		// Minimum execution time: 5_110_000 picoseconds.
		Weight::from_parts(5_110_000, 0)
			.saturating_add(Weight::from_parts(0, 3517))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Revive::ImmutableDataOf` (r:1 w:0)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	/// The range of component `n` is `[1, 4096]`.
	fn seal_get_immutable_data(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `200 + n * (1 Â±0)`
		//  Estimated: `7766`
		// Minimum execution time: 7_600_000 picoseconds.
		Weight::from_parts(10_540_000, 0)
			.saturating_add(Weight::from_parts(0, 7766))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Revive::ImmutableDataOf` (r:0 w:1)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	/// The range of component `n` is `[1, 4096]`.
	fn seal_set_immutable_data(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_890_000 picoseconds.
		Weight::from_parts(8_310_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	fn seal_value_transferred() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 470_000 picoseconds.
		Weight::from_parts(470_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_minimum_balance() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 400_000 picoseconds.
		Weight::from_parts(400_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_block_number() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 400_000 picoseconds.
		Weight::from_parts(400_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_now() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 410_000 picoseconds.
		Weight::from_parts(410_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `TransactionPayment::NextFeeMultiplier` (r:1 w:0)
	/// Proof: `TransactionPayment::NextFeeMultiplier` (`max_values`: Some(1), `max_size`: Some(16), added: 511, mode: `Measured`)
	fn seal_weight_to_fee() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `67`
		//  Estimated: `1552`
		// Minimum execution time: 7_420_000 picoseconds.
		Weight::from_parts(7_420_000, 0)
			.saturating_add(Weight::from_parts(0, 1552))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// The range of component `n` is `[0, 262140]`.
	fn seal_input(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 720_000 picoseconds.
		Weight::from_parts(25_741_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// The range of component `n` is `[0, 262140]`.
	fn seal_return(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 530_000 picoseconds.
		Weight::from_parts(41_021_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Revive::DeletionQueueCounter` (r:1 w:1)
	/// Proof: `Revive::DeletionQueueCounter` (`max_values`: Some(1), `max_size`: Some(8), added: 503, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:33 w:33)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::DeletionQueue` (r:0 w:1)
	/// Proof: `Revive::DeletionQueue` (`max_values`: None, `max_size`: Some(142), added: 2617, mode: `Measured`)
	/// Storage: `Revive::ImmutableDataOf` (r:0 w:1)
	/// Proof: `Revive::ImmutableDataOf` (`max_values`: None, `max_size`: Some(4118), added: 6593, mode: `Measured`)
	/// The range of component `n` is `[0, 32]`.
	fn seal_terminate(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `266 + n * (87 Â±0)`
		//  Estimated: `85745`
		// Minimum execution time: 22_031_000 picoseconds.
		Weight::from_parts(183_144_000, 0)
			.saturating_add(Weight::from_parts(0, 85745))
			.saturating_add(T::DbWeight::get().reads(34))
			.saturating_add(T::DbWeight::get().writes(36))
	}
	/// The range of component `t` is `[0, 4]`.
	/// The range of component `n` is `[0, 512]`.
	fn seal_deposit_event(_t: u32, n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 7_570_000 picoseconds.
		Weight::from_parts(7_671_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 1_995
			.saturating_add(Weight::from_parts(1_130, 0).saturating_mul(n.into()))
	}
	/// The range of component `i` is `[0, 262144]`.
	fn seal_debug_message(_i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 610_000 picoseconds.
		Weight::from_parts(185_494_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `744`
		//  Estimated: `744`
		// Minimum execution time: 9_330_000 picoseconds.
		Weight::from_parts(9_330_000, 0)
			.saturating_add(Weight::from_parts(0, 744))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn get_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10754`
		//  Estimated: `10754`
		// Minimum execution time: 39_841_000 picoseconds.
		Weight::from_parts(39_841_000, 0)
			.saturating_add(Weight::from_parts(0, 10754))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `744`
		//  Estimated: `744`
		// Minimum execution time: 11_160_000 picoseconds.
		Weight::from_parts(11_160_000, 0)
			.saturating_add(Weight::from_parts(0, 744))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	fn set_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `10754`
		//  Estimated: `10754`
		// Minimum execution time: 41_131_000 picoseconds.
		Weight::from_parts(41_131_000, 0)
			.saturating_add(Weight::from_parts(0, 10754))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 512]`.
	/// The range of component `o` is `[0, 512]`.
	fn seal_set_storage(_n: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `245 + o * (1 Â±0)`
		//  Estimated: `245 + o * (1 Â±0)`
		// Minimum execution time: 11_930_000 picoseconds.
		Weight::from_parts(12_870_000, 0)
			.saturating_add(Weight::from_parts(0, 245))
			// Standard Error: 642
			.saturating_add(Weight::from_parts(1_777, 0).saturating_mul(o.into()))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 1).saturating_mul(o.into()))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 512]`.
	fn seal_clear_storage(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `245 + n * (1 Â±0)`
		//  Estimated: `760`
		// Minimum execution time: 11_440_000 picoseconds.
		Weight::from_parts(11_981_000, 0)
			.saturating_add(Weight::from_parts(0, 760))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 512]`.
	fn seal_get_storage(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `245 + n * (1 Â±0)`
		//  Estimated: `760`
		// Minimum execution time: 10_810_000 picoseconds.
		Weight::from_parts(11_761_000, 0)
			.saturating_add(Weight::from_parts(0, 760))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 512]`.
	fn seal_contains_storage(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `245 + n * (1 Â±0)`
		//  Estimated: `760`
		// Minimum execution time: 10_181_000 picoseconds.
		Weight::from_parts(10_270_000, 0)
			.saturating_add(Weight::from_parts(0, 760))
			.saturating_add(T::DbWeight::get().reads(1))
	}
	/// Storage: `Skipped::Metadata` (r:0 w:0)
	/// Proof: `Skipped::Metadata` (`max_values`: None, `max_size`: None, mode: `Measured`)
	/// The range of component `n` is `[0, 512]`.
	fn seal_take_storage(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `245 + n * (1 Â±0)`
		//  Estimated: `760`
		// Minimum execution time: 12_650_000 picoseconds.
		Weight::from_parts(14_391_000, 0)
			.saturating_add(Weight::from_parts(0, 760))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	fn set_transient_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_250_000 picoseconds.
		Weight::from_parts(2_250_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn set_transient_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_790_000 picoseconds.
		Weight::from_parts(2_790_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn get_transient_storage_empty() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_640_000 picoseconds.
		Weight::from_parts(6_640_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn get_transient_storage_full() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_390_000 picoseconds.
		Weight::from_parts(2_390_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn rollback_transient_storage() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_530_000 picoseconds.
		Weight::from_parts(1_530_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// The range of component `n` is `[0, 512]`.
	/// The range of component `o` is `[0, 512]`.
	fn seal_set_transient_storage(n: u32, o: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 3_060_000 picoseconds.
		Weight::from_parts(145_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
			// Standard Error: 84
			.saturating_add(Weight::from_parts(5_693, 0).saturating_mul(n.into()))
			// Standard Error: 84
			.saturating_add(Weight::from_parts(6_396, 0).saturating_mul(o.into()))
	}
	/// The range of component `n` is `[0, 512]`.
	fn seal_clear_transient_storage(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_910_000 picoseconds.
		Weight::from_parts(3_220_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// The range of component `n` is `[0, 512]`.
	fn seal_get_transient_storage(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_680_000 picoseconds.
		Weight::from_parts(3_080_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// The range of component `n` is `[0, 512]`.
	fn seal_contains_transient_storage(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 2_390_000 picoseconds.
		Weight::from_parts(2_630_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// The range of component `n` is `[0, 512]`.
	fn seal_take_transient_storage(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 6_120_000 picoseconds.
		Weight::from_parts(6_170_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_transfer() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `101`
		//  Estimated: `0`
		// Minimum execution time: 13_440_000 picoseconds.
		Weight::from_parts(13_440_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Revive::ContractInfoOf` (r:1 w:0)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// The range of component `t` is `[0, 1]`.
	/// The range of component `i` is `[0, 262144]`.
	fn seal_call(t: u32, i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1221 + t * (101 Â±0)`
		//  Estimated: `4686 + t * (101 Â±0)`
		// Minimum execution time: 42_951_000 picoseconds.
		Weight::from_parts(46_696_000, 0)
			.saturating_add(Weight::from_parts(0, 4686))
			// Standard Error: 0
			.saturating_add(Weight::from_parts(3, 0).saturating_mul(i.into()))
			.saturating_add(T::DbWeight::get().reads(3))
			.saturating_add(T::DbWeight::get().writes(1))
			.saturating_add(Weight::from_parts(0, 101).saturating_mul(t.into()))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:0)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	fn seal_delegate_call() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1048`
		//  Estimated: `4513`
		// Minimum execution time: 35_001_000 picoseconds.
		Weight::from_parts(35_001_000, 0)
			.saturating_add(Weight::from_parts(0, 4513))
			.saturating_add(T::DbWeight::get().reads(2))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	/// Storage: `Revive::PristineCode` (r:1 w:0)
	/// Proof: `Revive::PristineCode` (`max_values`: None, `max_size`: Some(262180), added: 264655, mode: `Measured`)
	/// Storage: `Revive::ContractInfoOf` (r:1 w:1)
	/// Proof: `Revive::ContractInfoOf` (`max_values`: None, `max_size`: Some(1779), added: 4254, mode: `Measured`)
	/// Storage: `System::Account` (r:1 w:1)
	/// Proof: `System::Account` (`max_values`: None, `max_size`: Some(128), added: 2603, mode: `Measured`)
	/// The range of component `i` is `[0, 262144]`.
	fn seal_instantiate(_i: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `1275`
		//  Estimated: `4740`
		// Minimum execution time: 197_695_000 picoseconds.
		Weight::from_parts(1_103_494_000, 0)
			.saturating_add(Weight::from_parts(0, 4740))
			.saturating_add(T::DbWeight::get().reads(4))
			.saturating_add(T::DbWeight::get().writes(3))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn seal_hash_sha2_256(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_280_000 picoseconds.
		Weight::from_parts(186_724_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn seal_hash_keccak_256(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_410_000 picoseconds.
		Weight::from_parts(739_566_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn seal_hash_blake2_256(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_050_000 picoseconds.
		Weight::from_parts(252_305_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// The range of component `n` is `[0, 262144]`.
	fn seal_hash_blake2_128(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 1_040_000 picoseconds.
		Weight::from_parts(237_515_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// The range of component `n` is `[0, 261889]`.
	fn seal_sr25519_verify(_n: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 42_391_000 picoseconds.
		Weight::from_parts(1_149_006_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_ecdsa_recover() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 49_351_000 picoseconds.
		Weight::from_parts(49_351_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	fn seal_ecdsa_to_eth_address() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 10_870_000 picoseconds.
		Weight::from_parts(10_870_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	fn seal_set_code_hash() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `266`
		//  Estimated: `3731`
		// Minimum execution time: 19_560_000 picoseconds.
		Weight::from_parts(19_560_000, 0)
			.saturating_add(Weight::from_parts(0, 3731))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `Measured`)
	fn lock_delegate_dependency() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `304`
		//  Estimated: `3769`
		// Minimum execution time: 13_230_000 picoseconds.
		Weight::from_parts(13_230_000, 0)
			.saturating_add(Weight::from_parts(0, 3769))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// Storage: `Revive::CodeInfoOf` (r:1 w:1)
	/// Proof: `Revive::CodeInfoOf` (`max_values`: None, `max_size`: Some(96), added: 2571, mode: `MaxEncodedLen`)
	fn unlock_delegate_dependency() -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `304`
		//  Estimated: `3561`
		// Minimum execution time: 11_051_000 picoseconds.
		Weight::from_parts(11_051_000, 0)
			.saturating_add(Weight::from_parts(0, 3561))
			.saturating_add(T::DbWeight::get().reads(1))
			.saturating_add(T::DbWeight::get().writes(1))
	}
	/// The range of component `r` is `[0, 5000]`.
	fn instr(_r: u32, ) -> Weight {
		// Proof Size summary in bytes:
		//  Measured:  `0`
		//  Estimated: `0`
		// Minimum execution time: 9_990_000 picoseconds.
		Weight::from_parts(406_279_000, 0)
			.saturating_add(Weight::from_parts(0, 0))
	}
}
